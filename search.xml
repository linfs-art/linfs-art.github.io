<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BGP与邻居建立连接-基于RFC4271</title>
    <url>/2021/04/04/BGP/BGP%E4%B8%8E%E9%82%BB%E5%B1%85%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5-%E5%9F%BA%E4%BA%8ERFC4271/BGP%E4%B8%8E%E9%82%BB%E5%B1%85%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5-%E5%9F%BA%E4%BA%8ERFC4271/</url>
    <content><![CDATA[<h1 id="1-BGP的状态机"><a href="#1-BGP的状态机" class="headerlink" title="1 BGP的状态机"></a>1 BGP的状态机</h1><p>    BGP是根据状态机进行运转的，搞清楚了BGP的状态机，对BGP工作原理的理解会有帮助。<br>    限于篇幅，本文只讨论一切步骤都完美正常执行的情况（即收到的包都是正确的，与peer建立TCP连接一次成功等等）。当然RFC文档种还详细介绍了各种突发状况、各种处理方法等，实在是有点多，下篇文章再完整地叙述。</p>
<span id="more"></span>

<h2 id="1-1-Idle-state"><a href="#1-1-Idle-state" class="headerlink" title="1.1 Idle state"></a>1.1 Idle state</h2><p>    BGP协议为每一个peer(对等体)即邻居维护一个FSM。在配置BGP路由的时候，会经常见到这两个命令：<br>    router bgp asn<br>    该命令创建了一个bgp实例，还没有创建peer，FSM还没开始。<br>    另一个命令：<br>    <code>neighbor X.X.X.X remote-as asn</code><br>    neighbor命令执行后，bgp会为其创建一个peer，为其创建相应的FSM并开始运转，初始状态为Idle。<br>    Idle state不接受任何的TCP连接（比如别的BGP路由器要与其建立TCP连接）。可以认为，在Idle state的前半段，什么事都没干。当FSM捕获到一个ManualStart event或者AutomaticStart event时，开始进入Idle state的后半段。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notes: </span><br><span class="line">    ManualStart event:当用neighbor指定一个邻居之后，就要跟邻居建立TCP连接；如果ManualStart &#x3D; TRUE,那么与邻居建立TCP连接的过程就需要另外手动输入命令。（根据自己理解猜测的，不保证完全正确，仅供参考）</span><br><span class="line">    AutomaticStart event:如果AutomaticStart &#x3D; TRUE,那么与邻居建立TCP连接的过程就可以自动进行，应该是在neighbor命令执行后等待短暂的时间后进行peer的TCP连接。</span><br></pre></td></tr></table></figure>

<p>    捕获到一个ManualStart event或者AutomaticStart event时，Idle state的后半段开始了，后半段做的事主要有：<br>    （1）初始化BGP peer连接的资源（没咋懂）<br>    （2）初始化TCP 连接，说白了就是要开始与别的peer建立起TCP连接关系<br>    （3）监听TCP请求，可能是自己请求与别的peer建立TCP连接，也可能是别的peer请求与自己建立TCP连接关系<br>    （4）Set ConnectRetryCounter = 0<br>    （5）Starts the ConnectRetryTimer with the initial value<br>    （6）FSM开始转换状态，有Idle转为Connect（如果是ManualStart_with_PassiveTcpEstablishment event或者AutomaticStart_with_PassiveTcpEstablishment event则转为Active，这两个状态没有本质区别，先不管）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notes:</span><br><span class="line">    ConnectRetryCounter:表示尝试与peer建立TCP连接的次数，至于到达一定次数会怎么样，文档里我没找到</span><br><span class="line">    ConnectRetryTimer:定时器，即过多久尝试与peer建立TCP连接，RFC里建议的初始值为120s</span><br></pre></td></tr></table></figure>
<p>    注意：Idle state的后半段并不保证TCP连接已经建立完成，即Idle state会进行与peer进行TCP连接这个动作，该TCP连接可以一次成功、可能尝试多次才成功也可能不成功。但是FSM可不等TCP连接建立成功了才转换到Connect state,即在Idle state后半段我发出了建立TCP连接这个指令，就转换到Connect state,不管TCP连接成没成功。</p>
<h2 id="1-2-Connect-state"><a href="#1-2-Connect-state" class="headerlink" title="1.2 Connect state"></a>1.2 Connect state</h2><p>    当Idle state中的各个步骤都可以正确无误地执行后，就进入到了Connect state，在该状态又有其对应的一些事件及操作。<br>    Connect state在等待着TCP连接成功，如果TCP连接成功了（当然还有可能连接不成功和其他突发事件，这里不叙述），则会执行以下动作：<br>    （1）停止ConnectRetryTimer计时器<br>    （2）设置DelayOpenTimer为初始值<br>    （3）发送一个OPEN msg给peer（如果没设置DelayOpenTimer立马发送，有设置则等到时间到了再发送）<br>    （4）Sets the HoldTimer to a large value<br>    （5）改变状态到OpenSent state</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notes:</span><br><span class="line">    DelayOpenTimer:又一个定时器，指当与peer成功建立TCP连接后是否要延迟发送OPEN msg</span><br><span class="line">    HoldTimer:指从对端peer收到一个KEEPALIVE&#x2F;UPDATE msg所需要的最长时间，RFC建议default value为 90 s、large value为 4 min</span><br></pre></td></tr></table></figure>

<h2 id="1-3-OpenSent-state"><a href="#1-3-OpenSent-state" class="headerlink" title="1.3 OpenSent state"></a>1.3 OpenSent state</h2><p>    如果一切正常无error，那么就会从Connect state进入到OpenSent state。OpenSent state在等待着OPEN msg的到来，如果收到一个正确无误的OPEN msg后，则会进行：<br>    （1）Resets the DelayOpenTimer to zero（有什么用呢）<br>    （2）sets the BGP ConnectRetryTimer to zero<br>    （3）发送一个KEEPALIVE msg并启动KeepaliveTimer<br>    （4）转换状态至OpenConfirm</p>
<h2 id="1-4-OpenConfirm-state"><a href="#1-4-OpenConfirm-state" class="headerlink" title="1.4 OpenConfirm state"></a>1.4 OpenConfirm state</h2><p>    因为已经发送了一个KEEPALIVE msg给对端peer，所以在OpenConfirm state在等待着对端peer发送一个KEEPALIVE/NOTIFICATION msg过来。如果正确地收到了一个KEEPALIVE msg，则：<br>    （1）重启HoldTimer<br>    （2）转换状态至Established state</p>
<h2 id="1-5-Established-state"><a href="#1-5-Established-state" class="headerlink" title="1.5 Established state"></a>1.5 Established state</h2><p>    Established state可以说是BGP正常工作的最后一种状态了，进入了该状态BGP peer之间可以进行发送/接收UPDATE/NOTIFICATION/KEEPALIVE msg，也就是可以正常地交换更新网络中的路由信息了。<br>    若收到一个KEEPALIVE msg则：<br>    （1）重置HoldTimer定时器<br>    （2）状态仍是Established state<br>    若收到一个UPDATE msg，则：<br>    （1）处理UPDATE msg<br>    （2）重置HoldTimer定时器<br>    （3）状态仍是Established state</p>
]]></content>
      <categories>
        <category>BGP</category>
      </categories>
      <tags>
        <tag>BGP</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+theme-next+github page搭建blog</title>
    <url>/2021/04/04/hexo/hexo-and-theme-next-and-github-page-build-blog/hexo-and-theme-next-and-github-page-build-blog/</url>
    <content><![CDATA[<p>本文主要介绍win10下利用Hexo+theme-next+github page搭建个人博客。其中，<a href="https://github.com/next-theme/hexo-theme-next">theme-next</a>是一款简洁而又功能强大的Hexo主题。</p>
<span id="more"></span>

<h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1 环境配置"></a>1 环境配置</h1><h2 id="1-1-安装Hexo"><a href="#1-1-安装Hexo" class="headerlink" title="1.1 安装Hexo"></a>1.1 安装Hexo</h2><p>安装<code>Hexo</code>前需要安装<code>Node.js</code>和<code>Git</code>。安装好后，在<code>cmd</code>命令行下敲入命令<code>npm install -g hexo-cli</code>即可完成安装。<a href="https://hexo.io/zh-cn/docs/">这里</a>有详细的官网安装教程。</p>
<h2 id="1-2-下载-配置主题theme-next"><a href="#1-2-下载-配置主题theme-next" class="headerlink" title="1.2 下载/配置主题theme-next"></a>1.2 下载/配置主题theme-next</h2><p><a href="https://github.com/next-theme/hexo-theme-next">这里</a>有详细的官方配置教程。</p>
<p>要应用主题，需在博客配置文件（即根目录下的<code>_config.yml</code>）里修改配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h2 id="1-3-将个人博客与github仓库关联"><a href="#1-3-将个人博客与github仓库关联" class="headerlink" title="1.3 将个人博客与github仓库关联"></a>1.3 将个人博客与github仓库关联</h2><p>（1）在自己的github账户上创建一个github仓库，命名为<code>username.github.io</code>。<br>（2）在博客配置文件（即根目录下的<code>_config.yml</code>）里修改配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h1 id="2-博客搭建-amp-美化"><a href="#2-博客搭建-amp-美化" class="headerlink" title="2 博客搭建&amp;美化"></a>2 博客搭建&amp;美化</h1><h2 id="2-1-创建菜单栏"><a href="#2-1-创建菜单栏" class="headerlink" title="2.1 创建菜单栏"></a>2.1 创建菜单栏</h2><p>打开<code>cmd</code>窗口，执行以下命令创建文件夹（根据需求选择创建哪些文件夹）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page home</span><br><span class="line">hexo new page categories</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>检查主题配置文件（即根目录下的<code>_config.next.yml</code>），如果子菜单被注释掉了（如<code>archives</code>/<code>schedule</code>），则取消注释（注：如果想调整子菜单顺序直接在<code>_config.next.yml</code>配置文件里调整即可）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Usage: &#96;Key: &#x2F;link&#x2F; || icon&#96;</span><br><span class="line"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span><br><span class="line"># Value before &#96;||&#96; delimiter is the target link, value after &#96;||&#96; delimiter is the name of Font Awesome icon.</span><br><span class="line"># External url should start with http:&#x2F;&#x2F; or https:&#x2F;&#x2F;</span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F; || fa fa-home</span><br><span class="line">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class="line">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class="line">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class="line">  # archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class="line">  # schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class="line">  # sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class="line">  # commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br></pre></td></tr></table></figure>

<h2 id="2-2-添加头像-amp-博客Logo"><a href="#2-2-添加头像-amp-博客Logo" class="headerlink" title="2.2 添加头像&amp;博客Logo"></a>2.2 添加头像&amp;博客Logo</h2><p>将要添加的头像图片和Logo放在指定的文件夹中，此例中放在<code>/node_modules/hexo-theme-next/source/images/</code>目录下。</p>
<h3 id="2-2-1-设置头像"><a href="#2-2-1-设置头像" class="headerlink" title="2.2.1 设置头像"></a>2.2.1 设置头像</h3><p>（1）在<code>_config.next.yml</code>下填入头像的<code>url</code>，但这样头像是正方形的且没有动态效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # Replace the default image and set the url here.</span><br><span class="line">  url: &#x2F;images&#x2F;cattle.jpg</span><br><span class="line">  # If true, the avatar will be dispalyed in circle.</span><br><span class="line">  rounded: false</span><br><span class="line">  # If true, the avatar will be rotated with the cursor.</span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure>

<p>（2）设置圆形头像且与鼠标接触头像能够旋转<br>找到<code>sidebar-author.styl</code>配置文件，将<code>.site-author-image</code>替换为以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  &#x2F;* 头像圆形 *&#x2F;</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  &#x2F;* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused; *&#x2F;</span><br><span class="line"></span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* Z轴旋转动画 *&#x2F;</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-author-name &#123;</span><br><span class="line">  color: $site-author-name-color;</span><br><span class="line">  font-weight: $site-author-name-weight;</span><br><span class="line">  margin: $site-author-name-margin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.site-description &#123;</span><br><span class="line">  color: $site-description-color;</span><br><span class="line">  font-size: $site-description-font-size;</span><br><span class="line">  margin-top: $site-description-margin-top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-设置博客Logo"><a href="#2-2-2-设置博客Logo" class="headerlink" title="2.2.2 设置博客Logo"></a>2.2.2 设置博客Logo</h3><p>在<code>_config.next.yml</code>文件夹下替换掉Logo图片（可在<a href="https://tool.lu/favicon/">这里</a>将图片转成<code>16×16</code>/<code>32×32</code>大小）的路径即可，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Site Information Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">favicon:</span><br><span class="line">  small: &#x2F;images&#x2F;circle-cattle-16×16.png</span><br><span class="line">  medium: &#x2F;images&#x2F;circle-cattle-32×32.png</span><br></pre></td></tr></table></figure>

<h2 id="2-3-子菜单设置"><a href="#2-3-子菜单设置" class="headerlink" title="2.3 子菜单设置"></a>2.3 子菜单设置</h2><h3 id="2-3-1-首页"><a href="#2-3-1-首页" class="headerlink" title="2.3.1 首页"></a>2.3.1 <code>首页</code></h3><p>（1）首页可以自定义（即可以在<code>/home/</code>目录下创建<code>index.md</code>文件，在里面自定义要显示的内容）。默认情况（<code>/home/</code>目录下没有<code>index.md</code>）下点击<code>首页</code>会显示所有博客（默认全文显示）。<br>（2）首页显示博客摘要</p>
<p>方法1：<br>直接在文章中需要截断的地方加入：</p>
<p><code>&lt;!--more--&gt;</code></p>
<p>那么在首页显示时就会显示<code>&lt;!--more--&gt;</code>前面的内容。</p>
<p>方法2：<br>自己写摘要，不适用于懒人。</p>
<h3 id="2-3-2-分类"><a href="#2-3-2-分类" class="headerlink" title="2.3.2 分类"></a>2.3.2 <code>分类</code></h3><p>（1）将<code>categories</code>文件夹下的<code>index.md</code>文件的<code>meta</code>信息中的<code>type</code>设置为<code>categories</code>类型，例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2021-04-03 21:26:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>（2）将要写的博客归类到某一类，比如将<code>BGP与邻居建立连接-基于RFC4271</code>归类到<code>BGP</code>这一类，即在<code>meta</code>信息中填写<code>categories: BGP</code>，那么该文章就会自动被归类为<code>BGP</code>这一类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: BGP与邻居建立连接-基于RFC4271</span><br><span class="line">date: 2021-04-04 12:48:42</span><br><span class="line">categories: BGP</span><br><span class="line">tags: BGP</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>当点击<code>分类</code>时，页面显示如下：<br><img src="/images/hexo/hexo-and-theme-next-and-github-page-build-blog/categories.png" alt="分类"></p>
<h3 id="2-3-3-标签"><a href="#2-3-3-标签" class="headerlink" title="2.3.3 标签"></a>2.3.3 <code>标签</code></h3><p>设置类似于<code>分类</code>。</p>
<h3 id="2-3-4-添加博客搜索功能"><a href="#2-3-4-添加博客搜索功能" class="headerlink" title="2.3.4 添加博客搜索功能"></a>2.3.4 添加博客搜索功能</h3><p>（1）安装插件<code>hexo-generator-searchdb</code></p>
<p><code>npm install hexo-generator-searchdb --save</code></p>
<p>（2）修改主题配置文件，将<code>local_search</code>改为<code>enable</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Local Search</span><br><span class="line"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-generator-searchdb</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<p>（3）完成后在菜单栏处会多一个<code>搜索</code>。</p>
<h2 id="2-4-访问量统计"><a href="#2-4-访问量统计" class="headerlink" title="2.4 访问量统计"></a>2.4 访问量统计</h2><h3 id="2-4-1-网站总访问量统计"><a href="#2-4-1-网站总访问量统计" class="headerlink" title="2.4.1 网站总访问量统计"></a>2.4.1 网站总访问量统计</h3><p><code>thmem-next</code>主题集成了<code>不蒜子</code>统计，在配置文件（<code>_config_next.yml</code>）里<code>enable</code>一下即可，<code>不蒜子</code>也可以统计单个博文访问量，不过据说不太好用，下面用<code>Leancloud</code>统计单个博客访问量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Show Views &#x2F; Visitors of the website &#x2F; page with busuanzi.</span><br><span class="line"># For more information: http:&#x2F;&#x2F;ibruce.info&#x2F;2015&#x2F;04&#x2F;04&#x2F;busuanzi&#x2F;</span><br><span class="line">busuanzi_count:</span><br><span class="line">  enable: enable</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: false</span><br><span class="line">  post_views_icon: far fa-eye</span><br></pre></td></tr></table></figure>

<h3 id="2-4-2-单个博客访问量统计"><a href="#2-4-2-单个博客访问量统计" class="headerlink" title="2.4.2 单个博客访问量统计"></a>2.4.2 单个博客访问量统计</h3><p><code>theme-next</code>也已集成了<code>Leancloud</code>访问量统计功能，只需在<code>_config.next.yml</code>配置文件里<code>enable</code>一下即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Show number of visitors of each article.</span><br><span class="line"># You can visit https:&#x2F;&#x2F;www.leancloud.cn to get AppID and AppKey.</span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: **********************</span><br><span class="line">  app_key: **********************</span><br><span class="line">  # Required for apps from CN region</span><br><span class="line">  server_url: # &lt;your server url&gt;</span><br><span class="line">  # Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-leancloud-counter-security</span><br><span class="line">  # If you don&#39;t care about security in leancloud counter and just want to use it directly</span><br><span class="line">  # (without hexo-leancloud-counter-security plugin), set &#96;security&#96; to &#96;false&#96;.</span><br><span class="line">  security: true</span><br><span class="line">  visitor: true</span><br></pre></td></tr></table></figure>

<p>上述配置中需要<code>app_id</code>和<code>app_key</code>，可以到<code>Leancloud</code>上注册账号并注册应用获取。</p>
<h1 id="3-本地-amp-github-page部署"><a href="#3-本地-amp-github-page部署" class="headerlink" title="3 本地&amp;github page部署"></a>3 本地&amp;github page部署</h1><h2 id="3-1-本地部署"><a href="#3-1-本地部署" class="headerlink" title="3.1 本地部署"></a>3.1 本地部署</h2><p>（1）<code>hexo g</code>可生成静态文件（生成到<code>/public</code>目录下）；<br>（2）<code>hexo clean</code>清理（即删除<code>/public</code>目录）；<br>（3）<code>hexo s</code>可在本地启动，浏览器输入<code>localhost:4000</code>可访问博客。</p>
<h2 id="3-2-github-page部署"><a href="#3-2-github-page部署" class="headerlink" title="3.2 github page部署"></a>3.2 github page部署</h2><h1 id="4-写作"><a href="#4-写作" class="headerlink" title="4 写作"></a>4 写作</h1><p>支持<code>Markdown</code>。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
